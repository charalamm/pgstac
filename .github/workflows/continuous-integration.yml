name: CI

on:
  push:
    branches:
      - main
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      pgdocker: ${{ steps.check.outputs.pgtag }}
      buildpgdocker: ${{ steps.check.outputs.buildpg }}
      pyrustdocker: ${{ steps.check.outputs.pytag }}
      buildpyrustdocker: ${{ steps.check.outputs.buildpy }}

    steps:
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          pgstac:
            - 'docker/pgstac/**'
          pypgstac:
            - 'docker/pypgstac/**'
    - id: check
      run: |
        buildpg=false;
        ref=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}};
        [[ "${{ steps.filter.outputs.pgstac }}" == "true" ]] && buildpg=true || ref=latest;
        echo "pgtag=${{ env.REGISTRY }}/stac-utils/pgstac-postgres:$ref" >>$GITHUB_OUTPUT;
        echo "buildpg=$buildpg" >>$GITHUB_OUTPUT;
        buildy=false;
        ref=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}};
        [[ "${{ steps.filter.outputs.pypgstac }}" == "true" ]] && buildpy=true || ref=latest;
        echo "pytag=${{ env.REGISTRY }}/stac-utils/pgstac-pyrust:$ref" >>$GITHUB_OUTPUT;
        echo "buildpy=$buildpg" >>$GITHUB_OUTPUT;

  # currentchanges:
  #   runs-on: ubuntu-latest
  #   # Required permissions
  #   permissions:
  #     pull-requests: read
  #   # Set job outputs to values from filter step
  #   outputs:
  #     postgres: ${{ steps.filter.outputs.postgres }}
  #     ref: ${{ github.ref.name }}
  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: dorny/paths-filter@v2
  #     id: filter
  #     with:
  #       base: HEAD^
  #       filters: |
  #         postgres:
  #           - 'docker/pgstac/**'

  # changes:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     pgtag: ${{ steps.check.outputs.pgtag }}
  #     buildpg: ${{ steps.check.outputs.buildpg }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - id: check
  #       run: |
  #         git fetch origin main;
  #         buildpg=false;
  #         pgtag=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}};
  #         if ! git diff --stat main -- docker | head -c1 | grep -E '.'; then
  #           pgtag=latest;
  #         elif git diff --stat HEAD^ -- docker | head -c1 | grep -E '.'; then
  #           buildpg=true;
  #         fi;
  #         echo "pgtag=${{ env.REGISTRY }}/pgstac-pg:$pgtag" >>$GITHUB_OUTPUT;
  #         echo "buildpg=$buildpg" >>$GITHUB_OUTPUT;
  #     - id: show
  #       run: |
  #         echo "${{ steps.check.outputs.pgtag }}"
  #         echo "${{ steps.check.outputs.buildpg }}"


  buildpg:
    name: Build and push base postgres
    if: ${{ needs.changes.outputs.buildpgdocker == 'true' }}
    runs-on: ubuntu-latest
    needs: [changes]
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Base Postgres
        uses: docker/build-push-action@v4
        with:
          context: .
          target: pgstacbase-plrust
          file: docker/pgstac/Dockerfile
          tags: ${{ needs.changes.outputs.pgdocker }}
          push: true
          cache-from: type=gha
          cache-to: type=gha, mode=max

  buildpyrust:
    name: Build and push base pyrust
    if: ${{ needs.changes.outputs.buildpyrustdocker == 'true' }}
    runs-on: ubuntu-latest
    needs: [changes]
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Base pyrust
        uses: docker/build-push-action@v4
        with:
          context: .
          target: pyrustbase
          file: docker/pypgstac/Dockerfile
          tags: ${{ needs.changes.outputs.pyrustdocker }}
          push: true
          cache-from: type=gha
          cache-to: type=gha, mode=max

  test:
    name: test
    needs: [changes, buildpg, buildpyrust]
    runs-on: ubuntu-latest
    container:
      image:  ${{ needs.changes.outputs.pyrustdocker }}
      volumes:
        - /home/github/pgstac/pgstac/src/pypgstac:/workspace
    env:
      POSTGRES_PASSWORD: postgres
      PGPASSWORD: postgres
      PGHOST: postgres
      PGDATABASE: postgres
      PGUSER: postgres

    services:
      postgres:
        image: ${{ needs.changes.outputs.pgdocker }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      - name: Install pypgstac
        working-directory: /workspace
        run:  |
          pip install .[dev,test,psycopg];

      - name: Run tests
        working-directory: /workspace
        run:  |
          pytest -vvv


      # - uses: docker/setup-buildx-action@v2
      # - name: docker-compose-build
      #   run: docker buildx bake --file docker-compose.yml --file docker-compose-cache.json
      # - name: test
      #   id: test
      #   run: scripts/test
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     file: docker/pgstac/Dockerfile
      #     load: true
      #     push: false
      #     cache-from: type=gha
      #     cache-to: type=gha, mode=max
      # - name: pypgstacbuilder
      #   id: pypgstacbuilder
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: .
      #     file: docker/pypgstac/Dockerfile
      #     load: true
      #     push: false
      #     cache-from: type=gha
      #     cache-to: type=gha, mode=max

      # - name: Start Database
      #   run: docker run -d --rm -e POSTGRES_PASSWORD=pg --expose 5432 ${{ steps.pgstacbuilder.outputs.imageid }}

      # - name: Database Ready
      #   run: docker exec ${{ steps.pgstacbuilder.outputs.imageid }} pg_isready

      # - name: Run tests
      #   run: docker run --rm -e PGUSER=postgres -e PGDATABASE=postgres -e PGPASSWORD ${{ steps.pypgstacbuilder.outputs.imageid }} /opt/docker/pypgstac/bin/test
