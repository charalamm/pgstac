#!/bin/bash
set -e

if [[ "${CI}" ]]; then
    set -x
fi

if [ ! $PGSTACDOCKER == 1 ]; then
    echo "This script should only be run within pgstac docker"; exit 1;
fi

function tmppg(){

# Make temp directories for pgdata and logs
WORKSPACE=$(mktemp -d)

# Find an unused port

# Run tests using postgres user and trust authentication

export PGDATA=$WORKSPACE/pgdata
export PGLOG=$WORKSPACE/pglog

export PGDATABASE=postgres
export PGUSER=postgres

# Leverage scripts from docker-entrypoint.sh
source /usr/local/bin/docker-entrypoint.sh

gosu postgres initdb --username $PGUSER --auth=trust -D $PGDATA

# Start postgres with minimal logging settings
gosu postgres pg_ctl -l "$PGLOG" -w -o "-F -c fsync=off -c full_page_writes=off -c synchronous_commit=off -c archive_mode=off" start
trap "gosu postgres pg_ctl stop && rm -fr $WORKSPACE " 0 2 3 15

# Get location of script directory
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

cd /opt/src/pgstac
# Create template database with pgstac installed
psql -X -q -v ON_ERROR_STOP=1 <<EOSQL
CREATE DATABASE pgstac_test_db_template;
ALTER DATABASE pgstac_test_db_template SET CLIENT_MIN_MESSAGES TO WARNING;
ALTER DATABASE pgstac_test_db_template SET SEARCH_PATH to pgstac, public;
\connect pgstac_test_db_template;
\i pgstac.sql
EOSQL
}
export -f setuptestdb

function tmpdb(){
    TMPFILE=$(mktemp -t tmpdb_XXXXX)
    trap "rm $TMPFILE" 0 2 3 15
    TMPDB=$(basename $TMPFILE)
