#!/bin/bash
set -e

if [[ "${CI}" ]]; then
    set -x
fi
if [ ! $PGSTACDOCKER == 1 ]; then
    echo "This script should only be run within pgstac docker"; exit 1;
fi

source $(dirname $0)/tmpdb

function usage() {
    echo -n \
        "Usage: $(basename "$0")
Run PgSTAC tests.
This scripts is meant to be run inside the dev container.

"
}


function test_formatting(){
    cd /opt/src/pypgstac

    echo "Running ruff"
    ruff --cache-dir=/tmp/.ruff pypgstac tests

    echo "Running mypy"
    mypy --cache-dir=/tmp/.mypy pypgstac

    echo "Checking if there are any staged migrations."
    find pypgstac/migrations | grep 'staged' && { echo "There are staged migrations in pypgstac/migrations. Please check migrations and remove staged suffix."; exit 1; }


    VERSION=$(python -c "from pypgstac.version import __version__; print(__version__)")
    echo $VERSION

    echo "Checking whether base sql migration exists for pypgstac version."
    [ -f pypgstac/migrations/pgstac."${VERSION}".sql ] || { echo "****FAIL No Migration exists pypgstac/migrations/pgstac.${VERSION}.sql"; exit 1; }

    echo "Congratulations! All formatting tests pass."
}

function test_pgtap(){
cd /opt/src/pgstac
TEMPLATEDB=${1:-pgstac_test_db_template}
psql -X -q -v ON_ERROR_STOP=1 <<EOSQL
CREATE DATABASE pgstac_test_pgtap TEMPLATE $TEMPLATEDB;
ALTER DATABASE pgstac_test_pgtap SET client_min_messages to $CLIENTMESSAGES;
EOSQL
TESTOUTPUT=$(psql -X -q -v ON_ERROR_STOP=1 -f /opt/src/pgstac/tests/pgtap.sql pgstac_test_pgtap)
psql -X -q -v ON_ERROR_STOP=1 <<EOSQL
DROP DATABASE IF EXISTS pgstac_test_pgtap WITH (force);
EOSQL
if [[ $(echo "$TESTOUTPUT" | grep -e '^not') ]]; then
    echo "PGTap tests failed."
    echo "$TESTOUTPUT"
    exit 1
else
    echo "PGTap Tests Passed!"
fi

}

function test_basicsql(){
TEMPLATEDB=${1:-pgstac_test_db_template}
cd /opt/src/pgstac
psql -X -q -v ON_ERROR_STOP=1 <<EOSQL
CREATE DATABASE pgstac_test_basicsql TEMPLATE $TEMPLATEDB;
ALTER DATABASE pgstac_test_basicsql SET search_path to pgstac, public;
ALTER DATABASE pgstac_test_basicsql SET client_min_messages to $CLIENTMESSAGES;
ALTER DATABASE pgstac_test_basicsql SET pgstac.context to 'on';
ALTER DATABASE pgstac_test_basicsql SET pgstac."default_filter_lang" TO 'cql-json';
\connect pgstac_test_basicsql
\copy collections (content) FROM 'tests/testdata/collections.ndjson';
\copy items_staging (content) FROM 'tests/testdata/items.ndjson'
EOSQL

for SQLFILE in tests/basic/*.sql; do
TMPFILE=$(mktemp)
trap 'rm "$TMPFILE"' 0 2 3 15

SQLOUTFILE=${SQLFILE}.out
cd /opt/src/pgstac

echo "Running basic tests for $SQLFILE"
psql -X -t -a -v ON_ERROR_STOP=1 pgstac_test_basicsql \
    -c "BEGIN;" \
    -f $SQLFILE \
    -c "ROLLBACK;" \
    | sed -e '/^ROLLBACK/d' -e '/^BEGIN/d' >"$TMPFILE"

diff -y --suppress-common-lines -Z -b -w -B --strip-trailing-cr "$TMPFILE" $SQLOUTFILE && echo "TEST $SQLFILE PASSED" || { echo "***TEST FOR $SQLFILE FAILED***"; exit 1; }

done
psql -X -q -c "DROP DATABASE pgstac_test_basicsql WITH (force)";
}

function test_pypgstac(){
TEMPLATEDB=${1:-pgstac_test_db_template}
    cd /opt/src/pypgstac
    psql -X -q -v ON_ERROR_STOP=1 <<EOSQL
CREATE DATABASE pgstac_test_pypgstac TEMPLATE $TEMPLATEDB;
ALTER DATABASE pgstac_test_pypgstac SET client_min_messages to $CLIENTMESSAGES;
EOSQL
    pytest tests -o cache_dir=/tmp/.pytest_cache
    psql -X -q -c "DROP DATABASE pgstac_test_pypgstac WITH (force)";
}

function test_migrations(){
    psql -X -q -v ON_ERROR_STOP=1 <<EOSQL
CREATE DATABASE pgstac_test_migration;
ALTER DATABASE pgstac_test_migration SET search_path to pgstac, public;
ALTER DATABASE pgstac_test_migration SET client_min_messages to $CLIENTMESSAGES;
EOSQL
    export PGDATABASE=pgstac_test_migration
    echo "Migrating from version 0.1.9"
    pypgstac migrate --toversion 0.1.9
    pypgstac --version

    pypgstac migrate
    pypgstac --version

    echo "Running all tests against incrementally migrated database."
    test_pgtap pgstac_test_migration
    test_basicsql pgstac_test_migration
    test_pypgstac pgstac_test_migration
    psql -X -q -c "DROP DATABASE pgstac_test_migration WITH (force)" postgres
}

FORMATTING=0
SETUPDB=0
PGTAP=0
BASICSQL=0
PYPGSTAC=0
MIGRATIONS=0
MESSAGENOTICE=0
MESSAGELOG=0

while [[ $# -gt 0 ]]
    do
        key="$1"
        case $key in

            --help)
            usage
            exit 0
            shift
            ;;

            --v)
            MESSAGENOTICE=1
            shift
            ;;

            --vv)
            MESSAGELOG=1
            shift
            ;;

            --formatting)
            FORMATTING=1
            shift
            ;;

            --pgtap)
            SETUPDB=1
            PGTAP=1
            shift
            ;;

            --basicsql)
            SETUPDB=1
            BASICSQL=1
            shift
            ;;

            --pypgstac)
            SETUPDB=1
            PYPGSTAC=1
            shift
            ;;

            --migrations)
            SETUPDB=1
            MIGRATIONS=1
            shift
            ;;

            --nomigrations)
            SETUPDB=1
            PGTAP=1
            BASICSQL=1
            PYPGSTAC=1
            shift
            ;;

            *)    # unknown option
            usage
            exit 1;
            ;;
        esac
    done


CLIENTMESSAGES='warning'
[ $MESSAGENOTICE -eq 1 ] && CLIENTMESSAGES='notice'
[ $MESSAGELOG -eq 1 ] && CLIENTMESSAGES='log'
echo $CLIENTMESSAGES

if [[ ($FORMATTING -eq 0) && ($SETUPDB -eq 0) && ($PGTAP -eq 0) && ($BASICSQL -eq 0) && ($PYPGSTAC -eq 0) && ($MIGRATIONS -eq 0) ]]
then
    FORMATTING=1
    SETUPDB=1
    PGTAP=1
    BASICSQL=1
    PYPGSTAC=1
    MIGRATIONS=1
fi

[ $FORMATTING -eq 1 ] && test_formatting
[ $SETUPDB -eq 1 ] && setuptestdb
[ $PGTAP -eq 1 ] && test_pgtap
[ $BASICSQL -eq 1 ] && test_basicsql
[ $PYPGSTAC -eq 1 ] && test_pypgstac
[ $MIGRATIONS -eq 1 ] && test_migrations

exit 0
