#!/bin/bash
source $(dirname $0)/migra_funcs
set -e

if [[ "${CI}" ]]; then
    set -x
fi

function usage() {
    echo -n \
        "Usage: $(basename "$0").

This scripts is meant to be run inside the dev container.

"
}

FORCE=$1
[ -n "${FORCE}" ] && echo "Rewriting last migration step directly" || echo "Creating staging file for last migration."

if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    cd $BASEDIR
    # Get Array of available base migration files
    readarray -t VERSIONS < <(base_migration_versions)

    # Calculate incremental versions sql migrations
    cnt=$((${#VERSIONS[@]}-1))
    for (( i=0; i<$cnt; i++ )); do
        F=${VERSIONS[$i]}
        F_BASE="$MIGRATIONSDIR/pgstac.${F}.sql"
        T=${VERSIONS[$i+1]}
        T_BASE="$MIGRATIONSDIR/pgstac.${T}.sql"

        FILE="$MIGRATIONSDIR/pgstac.${F}-${T}.sql"
        [ -n "${FORCE}" -a -f "$FILE" -a $(( $i + 1 )) -eq $cnt ] && rm $FILE
        STAGED="$FILE.staged"

        if [ -f $FILE ]; then
            echo "Migration $FILE already exists."
        else
            echo "Creating migrations from $F to $T"
            echo "SET client_min_messages TO WARNING;" >$STAGED
            echo "SET SEARCH_PATH to pgstac, public;" >>$STAGED
            echo $?
            echo $F_BASE $T_BASE
            calc_migration $F_BASE $T_BASE >>$STAGED
            echo $?
            echo "SELECT set_version('$T');" >>$STAGED
            echo $?
            echo "Created '$STAGED'. You must review and rename to $FILE before"
            echo "committing and tagging a release."
        fi
        [ -n "${FORCE}" -a -f "$STAGED" ] &&  mv $STAGED $FILE
    done
fi
